{"ast":null,"code":"import { setOrdersLoadingState, setUserOrders } from \"./orders-actions\";\nimport RequestService from \"../../utils/request-service\";\nimport { ordersByEmailQuery, ordersByQuery } from \"../../utils/graphql-query/orders-query\";\nimport { ADMIN_GRAPHQL_ORDER, ADMIN_GRAPHQL_ORDERS, ADMIN_ORDER, ADMIN_ORDERS, USERS_GRAPHQL_ORDERS, USERS_ORDERS } from \"../../constants/urlConstants\";\nimport { LoadingStatus } from \"../../types/types\";\nexport const fetchUserOrders = () => async dispatch => {\n  dispatch(setOrdersLoadingState(LoadingStatus.LOADING));\n  const response = await RequestService.get(USERS_ORDERS, true);\n  dispatch(setUserOrders(response.data));\n};\nexport const fetchAllUsersOrders = () => async dispatch => {\n  dispatch(setOrdersLoadingState(LoadingStatus.LOADING));\n  const response = await RequestService.get(ADMIN_ORDERS, true);\n  dispatch(setUserOrders(response.data));\n};\nexport const fetchUserOrdersByEmail = email => async dispatch => {\n  dispatch(setOrdersLoadingState(LoadingStatus.LOADING));\n  const response = await RequestService.get(`${ADMIN_ORDER}/${email}`, true);\n  dispatch(setUserOrders(response.data));\n}; // graphql\n\nexport const fetchUserOrdersByQuery = email => async dispatch => {\n  dispatch(setOrdersLoadingState(LoadingStatus.LOADING));\n  const response = await RequestService.post(USERS_GRAPHQL_ORDERS, {\n    query: ordersByEmailQuery(email)\n  }, true);\n  dispatch(setUserOrders(response.data.data.ordersByEmail));\n};\nexport const fetchAllUsersOrdersByQuery = () => async dispatch => {\n  dispatch(setOrdersLoadingState(LoadingStatus.LOADING));\n  const response = await RequestService.post(ADMIN_GRAPHQL_ORDERS, {\n    query: ordersByQuery\n  }, true);\n  dispatch(setUserOrders(response.data.data.orders));\n};\nexport const fetchUserOrdersByEmailQuery = email => async dispatch => {\n  dispatch(setOrdersLoadingState(LoadingStatus.LOADING));\n  const response = await RequestService.post(ADMIN_GRAPHQL_ORDER, {\n    query: ordersByEmailQuery(email)\n  }, true);\n  dispatch(setUserOrders(response.data.data.ordersByEmail));\n};","map":{"version":3,"names":["setOrdersLoadingState","setUserOrders","RequestService","ordersByEmailQuery","ordersByQuery","ADMIN_GRAPHQL_ORDER","ADMIN_GRAPHQL_ORDERS","ADMIN_ORDER","ADMIN_ORDERS","USERS_GRAPHQL_ORDERS","USERS_ORDERS","LoadingStatus","fetchUserOrders","dispatch","LOADING","response","get","data","fetchAllUsersOrders","fetchUserOrdersByEmail","email","fetchUserOrdersByQuery","post","query","ordersByEmail","fetchAllUsersOrdersByQuery","orders","fetchUserOrdersByEmailQuery"],"sources":["C:/Users/ALKAMA/Desktop/commerce/ecommerce-spring-reactjs/frontend/src/redux/orders/orders-thunks.ts"],"sourcesContent":["import { Dispatch } from \"redux\";\r\n\r\nimport { setOrdersLoadingState, setUserOrders } from \"./orders-actions\";\r\nimport RequestService from \"../../utils/request-service\";\r\nimport { ordersByEmailQuery, ordersByQuery } from \"../../utils/graphql-query/orders-query\";\r\nimport {\r\n    ADMIN_GRAPHQL_ORDER,\r\n    ADMIN_GRAPHQL_ORDERS,\r\n    ADMIN_ORDER,\r\n    ADMIN_ORDERS,\r\n    USERS_GRAPHQL_ORDERS,\r\n    USERS_ORDERS\r\n} from \"../../constants/urlConstants\";\r\nimport { LoadingStatus } from \"../../types/types\";\r\n\r\nexport const fetchUserOrders = () => async (dispatch: Dispatch) => {\r\n    dispatch(setOrdersLoadingState(LoadingStatus.LOADING));\r\n    const response = await RequestService.get(USERS_ORDERS, true);\r\n    dispatch(setUserOrders(response.data));\r\n};\r\n\r\nexport const fetchAllUsersOrders = () => async (dispatch: Dispatch) => {\r\n    dispatch(setOrdersLoadingState(LoadingStatus.LOADING));\r\n    const response = await RequestService.get(ADMIN_ORDERS, true);\r\n    dispatch(setUserOrders(response.data));\r\n};\r\n\r\nexport const fetchUserOrdersByEmail = (email: string) => async (dispatch: Dispatch) => {\r\n    dispatch(setOrdersLoadingState(LoadingStatus.LOADING));\r\n    const response = await RequestService.get(`${ADMIN_ORDER}/${email}`, true);\r\n    dispatch(setUserOrders(response.data));\r\n};\r\n\r\n// graphql\r\nexport const fetchUserOrdersByQuery = (email: string) => async (dispatch: Dispatch) => {\r\n    dispatch(setOrdersLoadingState(LoadingStatus.LOADING));\r\n    const response = await RequestService.post(USERS_GRAPHQL_ORDERS, { query: ordersByEmailQuery(email) }, true);\r\n    dispatch(setUserOrders(response.data.data.ordersByEmail));\r\n};\r\n\r\nexport const fetchAllUsersOrdersByQuery = () => async (dispatch: Dispatch) => {\r\n    dispatch(setOrdersLoadingState(LoadingStatus.LOADING));\r\n    const response = await RequestService.post(ADMIN_GRAPHQL_ORDERS, { query: ordersByQuery }, true);\r\n    dispatch(setUserOrders(response.data.data.orders));\r\n};\r\n\r\nexport const fetchUserOrdersByEmailQuery = (email: string) => async (dispatch: Dispatch) => {\r\n    dispatch(setOrdersLoadingState(LoadingStatus.LOADING));\r\n    const response = await RequestService.post(ADMIN_GRAPHQL_ORDER, { query: ordersByEmailQuery(email) }, true);\r\n    dispatch(setUserOrders(response.data.data.ordersByEmail));\r\n};\r\n"],"mappings":"AAEA,SAASA,qBAAT,EAAgCC,aAAhC,QAAqD,kBAArD;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,SAASC,kBAAT,EAA6BC,aAA7B,QAAkD,wCAAlD;AACA,SACIC,mBADJ,EAEIC,oBAFJ,EAGIC,WAHJ,EAIIC,YAJJ,EAKIC,oBALJ,EAMIC,YANJ,QAOO,8BAPP;AAQA,SAASC,aAAT,QAA8B,mBAA9B;AAEA,OAAO,MAAMC,eAAe,GAAG,MAAM,MAAOC,QAAP,IAA8B;EAC/DA,QAAQ,CAACb,qBAAqB,CAACW,aAAa,CAACG,OAAf,CAAtB,CAAR;EACA,MAAMC,QAAQ,GAAG,MAAMb,cAAc,CAACc,GAAf,CAAmBN,YAAnB,EAAiC,IAAjC,CAAvB;EACAG,QAAQ,CAACZ,aAAa,CAACc,QAAQ,CAACE,IAAV,CAAd,CAAR;AACH,CAJM;AAMP,OAAO,MAAMC,mBAAmB,GAAG,MAAM,MAAOL,QAAP,IAA8B;EACnEA,QAAQ,CAACb,qBAAqB,CAACW,aAAa,CAACG,OAAf,CAAtB,CAAR;EACA,MAAMC,QAAQ,GAAG,MAAMb,cAAc,CAACc,GAAf,CAAmBR,YAAnB,EAAiC,IAAjC,CAAvB;EACAK,QAAQ,CAACZ,aAAa,CAACc,QAAQ,CAACE,IAAV,CAAd,CAAR;AACH,CAJM;AAMP,OAAO,MAAME,sBAAsB,GAAIC,KAAD,IAAmB,MAAOP,QAAP,IAA8B;EACnFA,QAAQ,CAACb,qBAAqB,CAACW,aAAa,CAACG,OAAf,CAAtB,CAAR;EACA,MAAMC,QAAQ,GAAG,MAAMb,cAAc,CAACc,GAAf,CAAoB,GAAET,WAAY,IAAGa,KAAM,EAA3C,EAA8C,IAA9C,CAAvB;EACAP,QAAQ,CAACZ,aAAa,CAACc,QAAQ,CAACE,IAAV,CAAd,CAAR;AACH,CAJM,C,CAMP;;AACA,OAAO,MAAMI,sBAAsB,GAAID,KAAD,IAAmB,MAAOP,QAAP,IAA8B;EACnFA,QAAQ,CAACb,qBAAqB,CAACW,aAAa,CAACG,OAAf,CAAtB,CAAR;EACA,MAAMC,QAAQ,GAAG,MAAMb,cAAc,CAACoB,IAAf,CAAoBb,oBAApB,EAA0C;IAAEc,KAAK,EAAEpB,kBAAkB,CAACiB,KAAD;EAA3B,CAA1C,EAAgF,IAAhF,CAAvB;EACAP,QAAQ,CAACZ,aAAa,CAACc,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBO,aAApB,CAAd,CAAR;AACH,CAJM;AAMP,OAAO,MAAMC,0BAA0B,GAAG,MAAM,MAAOZ,QAAP,IAA8B;EAC1EA,QAAQ,CAACb,qBAAqB,CAACW,aAAa,CAACG,OAAf,CAAtB,CAAR;EACA,MAAMC,QAAQ,GAAG,MAAMb,cAAc,CAACoB,IAAf,CAAoBhB,oBAApB,EAA0C;IAAEiB,KAAK,EAAEnB;EAAT,CAA1C,EAAoE,IAApE,CAAvB;EACAS,QAAQ,CAACZ,aAAa,CAACc,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBS,MAApB,CAAd,CAAR;AACH,CAJM;AAMP,OAAO,MAAMC,2BAA2B,GAAIP,KAAD,IAAmB,MAAOP,QAAP,IAA8B;EACxFA,QAAQ,CAACb,qBAAqB,CAACW,aAAa,CAACG,OAAf,CAAtB,CAAR;EACA,MAAMC,QAAQ,GAAG,MAAMb,cAAc,CAACoB,IAAf,CAAoBjB,mBAApB,EAAyC;IAAEkB,KAAK,EAAEpB,kBAAkB,CAACiB,KAAD;EAA3B,CAAzC,EAA+E,IAA/E,CAAvB;EACAP,QAAQ,CAACZ,aAAa,CAACc,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBO,aAApB,CAAd,CAAR;AACH,CAJM"},"metadata":{},"sourceType":"module"}