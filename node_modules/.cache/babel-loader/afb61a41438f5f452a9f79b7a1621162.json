{"ast":null,"code":"import { setPerfumes, setPerfumesLoadingState } from \"./perfumes-actions\";\nimport { LoadingStatus } from \"../../types/types\";\nimport { gePerfumesByIdsQuery, getAllPerfumesByQuery } from \"../../utils/graphql-query/perfume-query\";\nimport RequestService from \"../../utils/request-service\";\nimport { PERFUMES, PERFUMES_GRAPHQL_IDS, PERFUMES_GRAPHQL_PERFUMES, PERFUMES_IDS, PERFUMES_SEARCH, PERFUMES_SEARCH_GENDER, PERFUMES_SEARCH_PERFUMER } from \"../../constants/urlConstants\";\nexport const fetchPerfumes = () => async dispatch => {\n  dispatch(setPerfumesLoadingState(LoadingStatus.LOADING));\n  const response = await RequestService.get(PERFUMES);\n  dispatch(setPerfumes(response.data));\n};\nexport const fetchPerfumesByIds = ids => async dispatch => {\n  dispatch(setPerfumesLoadingState(LoadingStatus.LOADING));\n  const response = await RequestService.post(PERFUMES_IDS, ids);\n  dispatch(setPerfumes(response.data));\n};\nexport const fetchPerfumesByFilterParams = filter => async dispatch => {\n  dispatch(setPerfumesLoadingState(LoadingStatus.LOADING));\n  const response = await RequestService.post(PERFUMES_SEARCH, filter);\n  dispatch(setPerfumes(response.data));\n};\nexport const fetchPerfumesByGender = gender => async dispatch => {\n  dispatch(setPerfumesLoadingState(LoadingStatus.LOADING));\n  const response = await RequestService.post(PERFUMES_SEARCH_GENDER, gender);\n  dispatch(setPerfumes(response.data));\n};\nexport const fetchPerfumesByPerfumer = perfumer => async dispatch => {\n  dispatch(setPerfumesLoadingState(LoadingStatus.LOADING));\n  const response = await RequestService.post(PERFUMES_SEARCH_PERFUMER, perfumer);\n  dispatch(setPerfumes(response.data));\n}; // GraphQL thunks\n\nexport const fetchPerfumesByQuery = () => async dispatch => {\n  dispatch(setPerfumesLoadingState(LoadingStatus.LOADING));\n  const response = await RequestService.post(PERFUMES_GRAPHQL_PERFUMES, {\n    query: getAllPerfumesByQuery\n  });\n  dispatch(setPerfumes(response.data.data.perfumes));\n};\nexport const fetchPerfumesByIdsQuery = ids => async dispatch => {\n  dispatch(setPerfumesLoadingState(LoadingStatus.LOADING));\n  const response = await RequestService.post(PERFUMES_GRAPHQL_IDS, {\n    query: gePerfumesByIdsQuery(ids)\n  });\n  dispatch(setPerfumes(response.data.data.perfumesIds));\n};","map":{"version":3,"names":["setPerfumes","setPerfumesLoadingState","LoadingStatus","gePerfumesByIdsQuery","getAllPerfumesByQuery","RequestService","PERFUMES","PERFUMES_GRAPHQL_IDS","PERFUMES_GRAPHQL_PERFUMES","PERFUMES_IDS","PERFUMES_SEARCH","PERFUMES_SEARCH_GENDER","PERFUMES_SEARCH_PERFUMER","fetchPerfumes","dispatch","LOADING","response","get","data","fetchPerfumesByIds","ids","post","fetchPerfumesByFilterParams","filter","fetchPerfumesByGender","gender","fetchPerfumesByPerfumer","perfumer","fetchPerfumesByQuery","query","perfumes","fetchPerfumesByIdsQuery","perfumesIds"],"sources":["C:/Users/ALKAMA/Desktop/commerce/ecommerce-spring-reactjs/frontend/src/redux/perfumes/perfumes-thunks.ts"],"sourcesContent":["import { Dispatch } from \"redux\";\r\n\r\nimport { setPerfumes, setPerfumesLoadingState } from \"./perfumes-actions\";\r\nimport { FilterParamsType, LoadingStatus } from \"../../types/types\";\r\nimport { gePerfumesByIdsQuery, getAllPerfumesByQuery } from \"../../utils/graphql-query/perfume-query\";\r\nimport RequestService from \"../../utils/request-service\";\r\nimport {\r\n    PERFUMES,\r\n    PERFUMES_GRAPHQL_IDS,\r\n    PERFUMES_GRAPHQL_PERFUMES,\r\n    PERFUMES_IDS,\r\n    PERFUMES_SEARCH,\r\n    PERFUMES_SEARCH_GENDER,\r\n    PERFUMES_SEARCH_PERFUMER\r\n} from \"../../constants/urlConstants\";\r\n\r\nexport const fetchPerfumes = () => async (dispatch: Dispatch) => {\r\n    dispatch(setPerfumesLoadingState(LoadingStatus.LOADING));\r\n    const response = await RequestService.get(PERFUMES);\r\n    dispatch(setPerfumes(response.data));\r\n};\r\n\r\nexport const fetchPerfumesByIds = (ids: Array<number>) => async (dispatch: Dispatch) => {\r\n    dispatch(setPerfumesLoadingState(LoadingStatus.LOADING));\r\n    const response = await RequestService.post(PERFUMES_IDS, ids);\r\n    dispatch(setPerfumes(response.data));\r\n};\r\n\r\nexport const fetchPerfumesByFilterParams = (filter: FilterParamsType) => async (dispatch: Dispatch) => {\r\n    dispatch(setPerfumesLoadingState(LoadingStatus.LOADING));\r\n    const response = await RequestService.post(PERFUMES_SEARCH, filter);\r\n    dispatch(setPerfumes(response.data));\r\n};\r\n\r\nexport const fetchPerfumesByGender = (gender: { perfumeGender: string }) => async (dispatch: Dispatch) => {\r\n    dispatch(setPerfumesLoadingState(LoadingStatus.LOADING));\r\n    const response = await RequestService.post(PERFUMES_SEARCH_GENDER, gender);\r\n    dispatch(setPerfumes(response.data));\r\n};\r\n\r\nexport const fetchPerfumesByPerfumer = (perfumer: { perfumer: string }) => async (dispatch: Dispatch) => {\r\n    dispatch(setPerfumesLoadingState(LoadingStatus.LOADING));\r\n    const response = await RequestService.post(PERFUMES_SEARCH_PERFUMER, perfumer);\r\n    dispatch(setPerfumes(response.data));\r\n};\r\n\r\n// GraphQL thunks\r\nexport const fetchPerfumesByQuery = () => async (dispatch: Dispatch) => {\r\n    dispatch(setPerfumesLoadingState(LoadingStatus.LOADING));\r\n    const response = await RequestService.post(PERFUMES_GRAPHQL_PERFUMES, { query: getAllPerfumesByQuery });\r\n    dispatch(setPerfumes(response.data.data.perfumes));\r\n};\r\n\r\nexport const fetchPerfumesByIdsQuery = (ids: Array<number>) => async (dispatch: Dispatch) => {\r\n    dispatch(setPerfumesLoadingState(LoadingStatus.LOADING));\r\n    const response = await RequestService.post(PERFUMES_GRAPHQL_IDS, { query: gePerfumesByIdsQuery(ids) });\r\n    dispatch(setPerfumes(response.data.data.perfumesIds));\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}