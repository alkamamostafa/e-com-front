{"ast":null,"code":"import { setUpdatedUser, setUser, setUserLoadingState, userAddedReviewFailure, userAddedReviewSuccess, userUpdatedFailure, userUpdatedPasswordFailure, userUpdatedPasswordSuccess } from \"./user-actions\";\nimport { LoadingStatus } from \"../../types/types\";\nimport RequestService from \"../../utils/request-service\";\nimport { userByQuery } from \"../../utils/graphql-query/users-query\";\nimport { AUTH_EDIT_PASSWORD, USERS_EDIT, USERS_GRAPHQL_INFO, USERS_INFO, USERS_REVIEW } from \"../../constants/urlConstants\";\nexport const fetchUserInfo = () => async dispatch => {\n  dispatch(setUserLoadingState(LoadingStatus.LOADING));\n  const response = await RequestService.get(USERS_INFO, true);\n  dispatch(setUser(response.data));\n};\nexport const updateUserInfo = request => async dispatch => {\n  try {\n    const response = await RequestService.put(USERS_EDIT, request, true);\n    dispatch(setUpdatedUser(response.data));\n  } catch (error) {\n    dispatch(userUpdatedFailure(error.response.data));\n  }\n};\nexport const updateUserPassword = request => async dispatch => {\n  try {\n    const response = await RequestService.put(AUTH_EDIT_PASSWORD, request, true);\n    dispatch(userUpdatedPasswordSuccess(response.data));\n  } catch (error) {\n    dispatch(userUpdatedPasswordFailure(error.response.data));\n  }\n};\nexport const addReviewToPerfume = request => async dispatch => {\n  try {\n    await RequestService.post(USERS_REVIEW, request);\n    dispatch(userAddedReviewSuccess());\n  } catch (error) {\n    dispatch(userAddedReviewFailure(error.response.data));\n  }\n}; // GraphQL query\n\nexport const fetchUserInfoByQuery = userId => async dispatch => {\n  dispatch(setUserLoadingState(LoadingStatus.LOADING));\n  const response = await RequestService.post(USERS_GRAPHQL_INFO, {\n    query: userByQuery(userId)\n  }, true);\n  dispatch(setUser(response.data.data.user));\n};","map":{"version":3,"names":["setUpdatedUser","setUser","setUserLoadingState","userAddedReviewFailure","userAddedReviewSuccess","userUpdatedFailure","userUpdatedPasswordFailure","userUpdatedPasswordSuccess","LoadingStatus","RequestService","userByQuery","AUTH_EDIT_PASSWORD","USERS_EDIT","USERS_GRAPHQL_INFO","USERS_INFO","USERS_REVIEW","fetchUserInfo","dispatch","LOADING","response","get","data","updateUserInfo","request","put","error","updateUserPassword","addReviewToPerfume","post","fetchUserInfoByQuery","userId","query","user"],"sources":["C:/Users/ALKAMA/Desktop/commerce/ecommerce-spring-reactjs/frontend/src/redux/user/user-thunks.ts"],"sourcesContent":["import { Dispatch } from \"redux\";\r\n\r\nimport {\r\n    setUpdatedUser,\r\n    setUser,\r\n    setUserLoadingState,\r\n    userAddedReviewFailure,\r\n    userAddedReviewSuccess,\r\n    userUpdatedFailure,\r\n    userUpdatedPasswordFailure,\r\n    userUpdatedPasswordSuccess\r\n} from \"./user-actions\";\r\nimport { LoadingStatus, ReviewRequest, UserEditRequest, UserResetPasswordRequest } from \"../../types/types\";\r\nimport RequestService from \"../../utils/request-service\";\r\nimport { userByQuery } from \"../../utils/graphql-query/users-query\";\r\nimport {\r\n    AUTH_EDIT_PASSWORD,\r\n    USERS_EDIT,\r\n    USERS_GRAPHQL_INFO,\r\n    USERS_INFO,\r\n    USERS_REVIEW\r\n} from \"../../constants/urlConstants\";\r\n\r\nexport const fetchUserInfo = () => async (dispatch: Dispatch) => {\r\n    dispatch(setUserLoadingState(LoadingStatus.LOADING));\r\n    const response = await RequestService.get(USERS_INFO, true);\r\n    dispatch(setUser(response.data));\r\n};\r\n\r\nexport const updateUserInfo = (request: UserEditRequest) => async (dispatch: Dispatch) => {\r\n    try {\r\n        const response = await RequestService.put(USERS_EDIT, request, true);\r\n        dispatch(setUpdatedUser(response.data));\r\n    } catch (error) {\r\n        dispatch(userUpdatedFailure(error.response.data));\r\n    }\r\n};\r\n\r\nexport const updateUserPassword = (request: UserResetPasswordRequest) => async (dispatch: Dispatch) => {\r\n    try {\r\n        const response = await RequestService.put(AUTH_EDIT_PASSWORD, request, true);\r\n        dispatch(userUpdatedPasswordSuccess(response.data));\r\n    } catch (error) {\r\n        dispatch(userUpdatedPasswordFailure(error.response.data));\r\n    }\r\n};\r\n\r\nexport const addReviewToPerfume = (request: ReviewRequest) => async (dispatch: Dispatch) => {\r\n    try {\r\n        await RequestService.post(USERS_REVIEW, request);\r\n        dispatch(userAddedReviewSuccess());\r\n    } catch (error) {\r\n        dispatch(userAddedReviewFailure(error.response.data));\r\n    }\r\n};\r\n\r\n// GraphQL query\r\nexport const fetchUserInfoByQuery = (userId: string) => async (dispatch: Dispatch) => {\r\n    dispatch(setUserLoadingState(LoadingStatus.LOADING));\r\n    const response = await RequestService.post(USERS_GRAPHQL_INFO, { query: userByQuery(userId) }, true);\r\n    dispatch(setUser(response.data.data.user));\r\n};\r\n"],"mappings":"AAEA,SACIA,cADJ,EAEIC,OAFJ,EAGIC,mBAHJ,EAIIC,sBAJJ,EAKIC,sBALJ,EAMIC,kBANJ,EAOIC,0BAPJ,EAQIC,0BARJ,QASO,gBATP;AAUA,SAASC,aAAT,QAAwF,mBAAxF;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,SAASC,WAAT,QAA4B,uCAA5B;AACA,SACIC,kBADJ,EAEIC,UAFJ,EAGIC,kBAHJ,EAIIC,UAJJ,EAKIC,YALJ,QAMO,8BANP;AAQA,OAAO,MAAMC,aAAa,GAAG,MAAM,MAAOC,QAAP,IAA8B;EAC7DA,QAAQ,CAACf,mBAAmB,CAACM,aAAa,CAACU,OAAf,CAApB,CAAR;EACA,MAAMC,QAAQ,GAAG,MAAMV,cAAc,CAACW,GAAf,CAAmBN,UAAnB,EAA+B,IAA/B,CAAvB;EACAG,QAAQ,CAAChB,OAAO,CAACkB,QAAQ,CAACE,IAAV,CAAR,CAAR;AACH,CAJM;AAMP,OAAO,MAAMC,cAAc,GAAIC,OAAD,IAA8B,MAAON,QAAP,IAA8B;EACtF,IAAI;IACA,MAAME,QAAQ,GAAG,MAAMV,cAAc,CAACe,GAAf,CAAmBZ,UAAnB,EAA+BW,OAA/B,EAAwC,IAAxC,CAAvB;IACAN,QAAQ,CAACjB,cAAc,CAACmB,QAAQ,CAACE,IAAV,CAAf,CAAR;EACH,CAHD,CAGE,OAAOI,KAAP,EAAc;IACZR,QAAQ,CAACZ,kBAAkB,CAACoB,KAAK,CAACN,QAAN,CAAeE,IAAhB,CAAnB,CAAR;EACH;AACJ,CAPM;AASP,OAAO,MAAMK,kBAAkB,GAAIH,OAAD,IAAuC,MAAON,QAAP,IAA8B;EACnG,IAAI;IACA,MAAME,QAAQ,GAAG,MAAMV,cAAc,CAACe,GAAf,CAAmBb,kBAAnB,EAAuCY,OAAvC,EAAgD,IAAhD,CAAvB;IACAN,QAAQ,CAACV,0BAA0B,CAACY,QAAQ,CAACE,IAAV,CAA3B,CAAR;EACH,CAHD,CAGE,OAAOI,KAAP,EAAc;IACZR,QAAQ,CAACX,0BAA0B,CAACmB,KAAK,CAACN,QAAN,CAAeE,IAAhB,CAA3B,CAAR;EACH;AACJ,CAPM;AASP,OAAO,MAAMM,kBAAkB,GAAIJ,OAAD,IAA4B,MAAON,QAAP,IAA8B;EACxF,IAAI;IACA,MAAMR,cAAc,CAACmB,IAAf,CAAoBb,YAApB,EAAkCQ,OAAlC,CAAN;IACAN,QAAQ,CAACb,sBAAsB,EAAvB,CAAR;EACH,CAHD,CAGE,OAAOqB,KAAP,EAAc;IACZR,QAAQ,CAACd,sBAAsB,CAACsB,KAAK,CAACN,QAAN,CAAeE,IAAhB,CAAvB,CAAR;EACH;AACJ,CAPM,C,CASP;;AACA,OAAO,MAAMQ,oBAAoB,GAAIC,MAAD,IAAoB,MAAOb,QAAP,IAA8B;EAClFA,QAAQ,CAACf,mBAAmB,CAACM,aAAa,CAACU,OAAf,CAApB,CAAR;EACA,MAAMC,QAAQ,GAAG,MAAMV,cAAc,CAACmB,IAAf,CAAoBf,kBAApB,EAAwC;IAAEkB,KAAK,EAAErB,WAAW,CAACoB,MAAD;EAApB,CAAxC,EAAwE,IAAxE,CAAvB;EACAb,QAAQ,CAAChB,OAAO,CAACkB,QAAQ,CAACE,IAAT,CAAcA,IAAd,CAAmBW,IAApB,CAAR,CAAR;AACH,CAJM"},"metadata":{},"sourceType":"module"}