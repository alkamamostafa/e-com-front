{"ast":null,"code":"import { activateAccountFailure, activateAccountSuccess, forgotPasswordFailure, forgotPasswordSuccess, loginFailure, registerFailure, registerSuccess, resetPasswordCodeFailure, resetPasswordCodeSuccess, resetPasswordFailure, resetPasswordSuccess, setAuthLoadingState } from \"./auth-actions\";\nimport { LoadingStatus } from \"../../types/types\";\nimport RequestService from \"../../utils/request-service\";\nimport { AUTH_FORGOT, AUTH_LOGIN, AUTH_RESET, REGISTRATION, REGISTRATION_ACTIVATE } from \"../../constants/urlConstants\";\nimport { ACCOUNT, LOGIN } from \"../../constants/routeConstants\";\nimport { setUser } from \"../user/user-actions\";\nexport const login = (userData, history) => async dispatch => {\n  try {\n    const response = await RequestService.post(AUTH_LOGIN, userData);\n    localStorage.setItem(\"token\", response.data.token);\n    dispatch(setUser(response.data.user));\n    history.push(ACCOUNT);\n  } catch (error) {\n    dispatch(loginFailure(error.response.data));\n  }\n};\nexport const registration = userRegistrationData => async dispatch => {\n  try {\n    dispatch(setAuthLoadingState(LoadingStatus.LOADING));\n    await RequestService.post(REGISTRATION, userRegistrationData);\n    dispatch(registerSuccess());\n  } catch (error) {\n    dispatch(registerFailure(error.response.data));\n  }\n};\nexport const activateAccount = code => async dispatch => {\n  try {\n    const response = await RequestService.get(`${REGISTRATION_ACTIVATE}/${code}`);\n    dispatch(activateAccountSuccess(response.data));\n  } catch (error) {\n    dispatch(activateAccountFailure(error.response.data));\n  }\n};\nexport const forgotPassword = email => async dispatch => {\n  try {\n    dispatch(setAuthLoadingState(LoadingStatus.LOADING));\n    const response = await RequestService.get(`${AUTH_FORGOT}/${email}`);\n    dispatch(forgotPasswordSuccess(response.data));\n  } catch (error) {\n    dispatch(forgotPasswordFailure(error.response.data));\n  }\n};\nexport const fetchResetPasswordCode = code => async dispatch => {\n  try {\n    const response = await RequestService.get(`${AUTH_RESET}/${code}`);\n    dispatch(resetPasswordCodeSuccess(response.data));\n  } catch (error) {\n    dispatch(resetPasswordCodeFailure(error.response.data));\n  }\n};\nexport const resetPassword = (data, history) => async dispatch => {\n  try {\n    const response = await RequestService.post(AUTH_RESET, data);\n    dispatch(resetPasswordSuccess(response.data));\n    history.push(LOGIN);\n  } catch (error) {\n    dispatch(resetPasswordFailure(error.response.data));\n  }\n};","map":{"version":3,"names":["activateAccountFailure","activateAccountSuccess","forgotPasswordFailure","forgotPasswordSuccess","loginFailure","registerFailure","registerSuccess","resetPasswordCodeFailure","resetPasswordCodeSuccess","resetPasswordFailure","resetPasswordSuccess","setAuthLoadingState","LoadingStatus","RequestService","AUTH_FORGOT","AUTH_LOGIN","AUTH_RESET","REGISTRATION","REGISTRATION_ACTIVATE","ACCOUNT","LOGIN","setUser","login","userData","history","dispatch","response","post","localStorage","setItem","data","token","user","push","error","registration","userRegistrationData","LOADING","activateAccount","code","get","forgotPassword","email","fetchResetPasswordCode","resetPassword"],"sources":["C:/Users/ALKAMA/Desktop/commerce/ecommerce-spring-reactjs/frontend/src/redux/auth/auth-thunks.ts"],"sourcesContent":["import { Dispatch } from \"redux\";\r\nimport { History, LocationState } from \"history\";\r\n\r\nimport {\r\n    activateAccountFailure,\r\n    activateAccountSuccess,\r\n    forgotPasswordFailure,\r\n    forgotPasswordSuccess,\r\n    loginFailure,\r\n    registerFailure,\r\n    registerSuccess,\r\n    resetPasswordCodeFailure,\r\n    resetPasswordCodeSuccess,\r\n    resetPasswordFailure,\r\n    resetPasswordSuccess,\r\n    setAuthLoadingState\r\n} from \"./auth-actions\";\r\nimport { LoadingStatus, UserData, UserRegistration, UserResetPasswordRequest } from \"../../types/types\";\r\nimport RequestService from \"../../utils/request-service\";\r\nimport { AUTH_FORGOT, AUTH_LOGIN, AUTH_RESET, REGISTRATION, REGISTRATION_ACTIVATE } from \"../../constants/urlConstants\";\r\nimport { ACCOUNT, LOGIN } from \"../../constants/routeConstants\";\r\nimport { setUser } from \"../user/user-actions\";\r\n\r\nexport const login = (userData: UserData, history: History<LocationState>) => async (dispatch: Dispatch) => {\r\n    try {\r\n        const response = await RequestService.post(AUTH_LOGIN, userData);\r\n        localStorage.setItem(\"token\", response.data.token);\r\n        dispatch(setUser(response.data.user));\r\n        history.push(ACCOUNT);\r\n    } catch (error) {\r\n        dispatch(loginFailure(error.response.data));\r\n    }\r\n};\r\n\r\nexport const registration = (userRegistrationData: UserRegistration) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(setAuthLoadingState(LoadingStatus.LOADING));\r\n        await RequestService.post(REGISTRATION, userRegistrationData);\r\n        dispatch(registerSuccess());\r\n    } catch (error) {\r\n        dispatch(registerFailure(error.response.data));\r\n    }\r\n};\r\n\r\nexport const activateAccount = (code: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        const response = await RequestService.get(`${REGISTRATION_ACTIVATE}/${code}`);\r\n        dispatch(activateAccountSuccess(response.data));\r\n    } catch (error) {\r\n        dispatch(activateAccountFailure(error.response.data));\r\n    }\r\n};\r\n\r\nexport const forgotPassword = (email: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(setAuthLoadingState(LoadingStatus.LOADING));\r\n        const response = await RequestService.get(`${AUTH_FORGOT}/${email}`);\r\n        dispatch(forgotPasswordSuccess(response.data));\r\n    } catch (error) {\r\n        dispatch(forgotPasswordFailure(error.response.data));\r\n    }\r\n};\r\n\r\nexport const fetchResetPasswordCode = (code: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        const response = await RequestService.get(`${AUTH_RESET}/${code}`);\r\n        dispatch(resetPasswordCodeSuccess(response.data));\r\n    } catch (error) {\r\n        dispatch(resetPasswordCodeFailure(error.response.data));\r\n    }\r\n};\r\n\r\nexport const resetPassword =\r\n    (data: UserResetPasswordRequest, history: History<LocationState>) => async (dispatch: Dispatch) => {\r\n        try {\r\n            const response = await RequestService.post(AUTH_RESET, data);\r\n            dispatch(resetPasswordSuccess(response.data));\r\n            history.push(LOGIN);\r\n        } catch (error) {\r\n            dispatch(resetPasswordFailure(error.response.data));\r\n        }\r\n    };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}